{"version":3,"sources":["shared/images/logo.svg","components/AppNavbar/index.js","components/ClickyItemContainer/ItemSrc/index.js","components/ClickyItemContainer/ClickyItem/index.js","components/ClickyItemContainer/index.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppNavbar","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","class","this","props","score","topScore","target","rel","src","logo","alt","Component","images","url","ClickyItem","item","image","onClick","ClickyItemContainer","_this","indices","map","i","key","toString","items","renderItems","shuffle","arrSize","iniArray","resArray","push","ndx","Math","floor","random","splice","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","initItems","clickyImages","length","msg","srcImages","img","isClicked","slice","unshift","setState","every","_this2","components_AppNavbar","components_ClickyItemContainer","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b01e46aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/*\r\n  App Navbar\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport \"./style.css\";\r\nimport logo from '../../shared/images/logo.svg';\r\n\r\nclass AppNavbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand\">\r\n        <a className=\"navbar-brand App-header-title\" href=\"/\">\r\n          2019 Seattle Mariners Clicky Game\r\n        </a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n          <div className=\"navbar-navi game-stats\">\r\n            <span class=\"nav-item ml-3 score\">Score {this.props.score}</span>\r\n            <span class=\"nav-item ml-3 top-score\">Top Score {this.props.topScore}</span>\r\n          </div>\r\n        </div>\r\n        <a className=\"navbar-brand\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </a>\r\n        <a className=\"navbar-brand\"\r\n          href=\"http://m.mlb.com/sea/roster\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\">\r\n          <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0a/Seattle_Mariners_logo_1980_to_1986.png\" className=\"Mariners-logo\" alt=\"logo\" />\r\n        </a>\r\n      </nav>\r\n    );\r\n  }; \r\n} \r\n\r\nexport default AppNavbar;","\r\n//\r\n// Clickable image sources \r\n//\r\nexport const images = [\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/429665@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/571745@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/570267@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/572122@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/543829@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/553882@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/579328@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/433587@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/594835@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/596129@2x.jpg\"\r\n  }, \r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/664238@2x.jpg\"\r\n  },\r\n  {\r\n    \"url\": \"https://securea.mlb.com/mlb/images/players/head_shot/571679@2x.jpg\"\r\n  }\r\n];\r\n","\r\nimport React from 'react';\r\nimport \"./style.css\";\r\n\r\n//\r\n// Clickable item component\r\n//\r\nexport default function ClickyItem(props) {\r\n  return (\r\n    <img\r\n      src={props.item.image.url}\r\n      alt=\"unavailable\"\r\n      className=\"rounded float-left m-2 clicky-item\"\r\n      onClick={props.onClick}\r\n    />\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport ClickyItem from \"./ClickyItem\";\r\nimport \"./style.css\";\r\n\r\n//\r\n// Container for the clickable items\r\n//\r\n// PARAMS:\r\n// * props = React props\r\n// * srcImages = array of image source URL's\r\n//\r\nclass ClickyItemContainer extends Component {\r\n  //\r\n  // Render clickable items\r\n  //\r\n  renderItems() {\r\n    return (\r\n      <div className=\"container\">\r\n        {\r\n          this.props.indices.map(i => (\r\n            <div key={i.toString()}>\r\n              <ClickyItem\r\n                item={this.props.items[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n              />\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  //\r\n  // Render the component\r\n  // \r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.renderItems()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Export the Main class\r\nexport default ClickyItemContainer;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { images as clickyImages } from \"./ClickyItemContainer/ItemSrc\";\nimport Game from './ClickyItemContainer';\n\n//\n// Main game app component\n//\n// * state\n//     items: [{ image: <sourc image>, isClicked: <true/false> }, ...]\n//     indices: <shuffled array indices for the items>\n//     score: <current game score>\n//     topScore: <the highest game score>\n//     msg: <status message to display> \n//\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: this.initItems(clickyImages),\n      indices: shuffle(clickyImages.length),\n      score: 0,\n      topScore: 0,\n      msg: 'Click on an image without clicking the same one twice!'\n    };\n  }\n \n  //\n  // Initialized array of clickable objects\n  //\n  initItems(srcImages) {\n    return srcImages.map((img) => {\n      return {\n        image: img,\n        isClicked: false,\n      }\n    });\n  }\n  \n  //\n  // Handle an item click event\n  //\n  handleClick(i) {\n    let items = this.state.items.slice();\n    let topScore = this.state.topScore * 1;\n    let msg = [];\n\n    // Reset if the same item is clicked\n    if (items[i].isClicked) {\n      items = this.initItems(clickyImages);\n      \n      if (this.state.score > topScore) {\n        topScore = this.state.score * 1;\n        msg.push(\" Highest score!\");\n      }\n      \n      msg.unshift(\"You guessed incorrectly...\");\n      this.setState({\n        items: items,\n        indices: shuffle(items.length),\n        score: 0,\n        topScore: topScore, \n        msg: msg\n      });\n      \n      return;\n    }\n     \n    // update the items[i], shuffle, and increment the score\n    items[i].isClicked = true;\n    let score = this.state.score + 1;\n    \n    if (items.every(item => item.isClicked)) {\n      msg.push(\"PERFECT!!! You guessed all correctly\");\n      items = this.initItems(clickyImages);\n      topScore = score;\n      score = 0;\n    } else {\n      msg.push(\"You guessed correctly\");\n    }\n    \n    this.setState({\n      items: items,\n      indices: shuffle(items.length),\n      score: score,\n      topScore: topScore,\n      msg: msg\n    });\n  }\n  \n  //\n  // Render the component\n  // \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <AppNavbar\n            score={this.state.score}\n            topScore={this.state.topScore}\n          />\n        </header>\n\n        <h4 class=\"msg-text\">\n          {this.state.msg}\n        </h4>\n        \n        <Game \n          items={this.state.items}\n          indices={this.state.indices}\n          onClick={i => this.handleClick(i)}\n        />\n      </div>\n    );\n  }\n}\n\n//\n// Shuffled array indices\n//\n// PARAMS:\n// * arrSize: size of an existing array\n//\n// RETURN:\n// * randomized array indices for the existing array\n// \nfunction shuffle(arrSize) {\n  let iniArray = [];\n  let resArray = [];\n  \n  for (let i = 0; i < arrSize; i++) {\n    iniArray.push(i);\n  }\n  \n  for (let i = 0; i < arrSize; i++)  {\n    const ndx = Math.floor(Math.random() * (arrSize - i));\n    resArray[i] = iniArray.splice(ndx, 1)[0];\n  }\n  \n  return resArray;\n}\n\n// Export the App\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}