{"version":3,"sources":["components/main/Game.js","components/App.js","serviceWorker.js","index.js","shared/images/logo.svg"],"names":["clickyImages","ClickyItem","props","react_default","a","createElement","src","item","img","alt","className","style","width","height","onClick","ClickyItemContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","initItems","indices","shuffle","length","score","topScore","srcImages","map","isClicked","i","slice","setState","_this2","key","toString","handleClick","arrSize","iniArray","resArray","push","ndx","Math","floor","random","splice","color","textAlign","renderItems","Component","App","href","target","rel","logo","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Game","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.d6d54776.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n//\r\n// Clickable image sources \r\n//\r\nconst clickyImages = [\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/429665@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/571745@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/570267@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/572122@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/543829@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/553882@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/579328@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/433587@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/594835@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/596129@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/664238@2x.jpg',\r\n  'https://securea.mlb.com/mlb/images/players/head_shot/571679@2x.jpg'\r\n];\r\n\r\nfunction ClickyItem(props) {\r\n  const imageStyle = {\r\n    width: \"11vw\",\r\n    height: \"auto\",\r\n  };\r\n  \r\n  return (\r\n    <img\r\n      src={props.item.img}\r\n      alt=\"unavailable\"\r\n      className=\"rounded float-left m-2\"\r\n      style={imageStyle}\r\n      onClick={props.onClick}\r\n    />\r\n  );\r\n}\r\n\r\n//\r\n// Container for the clickable items\r\n//\r\n// PARAMS:\r\n// * props = React props\r\n// * srcImages = array of image source URL's\r\n//\r\nclass ClickyItemContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: this.initItems(clickyImages),\r\n      indices: this.shuffle(clickyImages.length),\r\n      score: 0,\r\n      topScore: 0,\r\n    };\r\n  }\r\n \r\n  //\r\n  // Initialized array of clickable objects\r\n  //\r\n  initItems(srcImages) {\r\n    return srcImages.map((img) => {\r\n      return {\r\n        img: img,\r\n        isClicked: false,\r\n      }\r\n    });\r\n  }\r\n  \r\n  //\r\n  // Handle an item click event\r\n  //\r\n  handleClick(i) {\r\n    const items = this.state.items.slice();\r\n    let score = this.state.score + 1;\r\n\r\n    // Reset if the same item is clicked\r\n    if (items[i].isClicked) {\r\n      const items = this.initItems(clickyImages);\r\n      let topScore = this.state.topScore;\r\n      score = 0;\r\n      \r\n      if (this.state.score > this.state.topScore) {\r\n        topScore = this.state.score * 1;\r\n      }\r\n      \r\n      this.setState({\r\n        items: items,\r\n        indices: this.shuffle(items.length),\r\n        score: score,\r\n        topScore: topScore, \r\n      });\r\n      \r\n      return;\r\n    }\r\n    \r\n    // shuffle and increment the score\r\n    items[i].isClicked = true;\r\n    this.setState({\r\n      items: items,\r\n      indices: this.shuffle(items.length),\r\n      score: this.state.score + 1,\r\n    });\r\n  }\r\n\r\n  //\r\n  // Render clickable items\r\n  //\r\n  renderItems() {\r\n    return (\r\n      <div className=\"container\">\r\n        {\r\n          this.state.indices.map(i => (\r\n            <div key={i.toString()}>\r\n              <ClickyItem\r\n                item={this.state.items[i]}\r\n                onClick={() => this.handleClick(i)}\r\n              />\r\n            </div>\r\n          ))\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  //\r\n  // Shuffled array indices\r\n  //\r\n  // PARAMS:\r\n  // * arrSize: size of an existing array\r\n  //\r\n  // RETURN:\r\n  // * randomized array indices for the existing array\r\n  // \r\n  shuffle(arrSize) {\r\n    let iniArray = [];\r\n    let resArray = [];\r\n    \r\n    for (let i = 0; i < arrSize; i++) {\r\n      iniArray.push(i);\r\n    }\r\n    \r\n    for (let i = 0; i < arrSize; i++)  {\r\n      const ndx = Math.floor(Math.random() * (arrSize - i));\r\n      resArray[i] = iniArray.splice(ndx, 1)[0];\r\n    }\r\n    \r\n    return resArray;\r\n  }\r\n  \r\n  //\r\n  // Render the component\r\n  // \r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4 style={{color: '#2255cc', textAlign: 'center'}}>\r\n          Score: {this.state.score} \r\n          | Top Score: {this.state.topScore}\r\n        </h4>\r\n        {this.renderItems()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Export the Main class\r\nexport default ClickyItemContainer;\r\n\r\n","import React, { Component } from 'react';\nimport logo from '../shared/images/logo.svg';\nimport './App.css';\nimport Game from './main/Game';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav className=\"navbar navbar-expand navbar-light bg-light\">\n            <a className=\"navbar-brand\"\n              href=\"https://reactjs.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </a>\n            <a className=\"navbar-brand\" href=\"/\" style={{color: '#2255cc', textAlign: 'center'}}>\n              2019 Seattle Mariners Clicky Game\n            </a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n              <div className=\"navbar-nav\">\n                {/* <a class=\"nav-item nav-link active\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\n                <a class=\"nav-item nav-link\" href=\"#\">Features</a>\n                <a class=\"nav-item nav-link\" href=\"#\">Pricing</a>\n                <a class=\"nav-item nav-link disabled\" href=\"#\">Disabled</a> */}\n              </div>\n            </div>\n          </nav> \n        </header>\n        \n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}